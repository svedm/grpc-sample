//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: todo.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Todo_ToDoServiceClient, then call methods of this protocol to make API calls.
public protocol Todo_ToDoServiceClientProtocol: GRPCClient {
  func list(
    _ request: Todo_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Todo_Empty, Todo_ListResponse>

  func add(
    _ request: Todo_AddRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Todo_AddRequest, Todo_ToDoItem>

  func remove(
    _ request: Todo_RemoveRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Todo_RemoveRequest, Todo_ToDoItem>

}

extension Todo_ToDoServiceClientProtocol {

  /// Unary call to List
  ///
  /// - Parameters:
  ///   - request: Request to send to List.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func list(
    _ request: Todo_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Todo_Empty, Todo_ListResponse> {
    return self.makeUnaryCall(
      path: "/todo.ToDoService/List",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to Add
  ///
  /// - Parameters:
  ///   - request: Request to send to Add.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func add(
    _ request: Todo_AddRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Todo_AddRequest, Todo_ToDoItem> {
    return self.makeUnaryCall(
      path: "/todo.ToDoService/Add",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to Remove
  ///
  /// - Parameters:
  ///   - request: Request to send to Remove.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func remove(
    _ request: Todo_RemoveRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Todo_RemoveRequest, Todo_ToDoItem> {
    return self.makeUnaryCall(
      path: "/todo.ToDoService/Remove",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Todo_ToDoServiceClient: Todo_ToDoServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the todo.ToDoService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Todo_ToDoServiceProvider: CallHandlerProvider {
  func list(request: Todo_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Todo_ListResponse>
  func add(request: Todo_AddRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Todo_ToDoItem>
  func remove(request: Todo_RemoveRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Todo_ToDoItem>
}

extension Todo_ToDoServiceProvider {
  public var serviceName: Substring { return "todo.ToDoService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "List":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.list(request: request, context: context)
        }
      }

    case "Add":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.add(request: request, context: context)
        }
      }

    case "Remove":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.remove(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

